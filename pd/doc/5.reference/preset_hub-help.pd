#N canvas 76 64 553 758 10;
#X obj 171 1096 cnv 15 365 82 empty empty empty 20 12 0 14 #fcc4c4
#404040 0;
#X obj 109 282 cnv 15 60 37 empty empty empty 20 12 0 14 #fcc4c4 #404040
0;
#X obj 183 294 cnv 15 44 27 empty empty empty 20 12 0 14 #c4dcdc #404040
0;
#X obj 0 1714 cnv 15 552 21 empty \$0-pddp.cnv.footer empty 20 12 0
14 #dcdcdc #404040 0;
#X obj 0 0 cnv 15 552 40 empty \$0-pddp.cnv.header preset_hub 3 12
0 18 #c4dcdc #000000 0;
#X obj 0 349 cnv 3 550 3 empty \$0-pddp.cnv.inlets inlets 8 12 0 13
#dcdcdc #000000 0;
#N canvas 418 235 482 332 META 0;
#X text 12 125 HELP_PATCH_AUTHORS Jonathan Wilkes revised the patch
to conform to the PDDP template for Pd version 0.42.;
#X text 12 5 KEYWORDS control storage;
#X text 12 25 LICENSE;
#X text 12 45 DESCRIPTION universal preset system for Pd-l2ork;
#X text 12 85 OUTLET_0 anything;
#X text 12 105 AUTHOR Ivica Ico Bukvic (c) 2012 <ico@vt.edu>;
#X text 12 65 INLET_0 clear purge recall reset store;
#X restore 500 1716 pd META;
#X obj 0 795 cnv 3 550 3 empty \$0-pddp.cnv.outlets outlets 8 12 0
13 #dcdcdc #000000 0;
#X obj 0 930 cnv 3 550 3 empty \$0-pddp.cnv.argument arguments 8 12
0 13 #dcdcdc #000000 0;
#X obj 0 1190 cnv 3 550 3 empty \$0-pddp.cnv.more_info more_info 8
12 0 13 #dcdcdc #000000 0;
#X obj 71 357 cnv 17 3 432 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc
#9c9c9c 0;
#N canvas 102 481 428 97 Related_objects 0;
#X obj 1 1 cnv 15 425 20 empty \$0-pddp.cnv.subheading empty 3 12 0
14 #c4dcdc #000000 0;
#X obj 22 36 preset_node;
#X text 7 1 [preset_hub] Related Objects;
#X obj 98 36 preset_node_array;
#X restore 101 1716 pd Related_objects;
#X obj 71 804 cnv 17 3 120 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc
#9c9c9c 0;
#X obj 4 1716 pddp/pddplink all_about_help_patches.pd -text Usage Guide
;
#X text 11 20 universal preset system for pd-l2ork;
#X obj 20 202 preset_hub test %hidden% %node% 2 32 1 %preset% 1 problems
%preset% 2 skidoo %preset% 3 nights %preset% 0 stooges %node% 1 34
%preset% 0 aaa 32 1 %preset% 1 2.24 nlah 1 %preset% 2 1 2 3 4 %preset%
3 1 2 3 4 %node% 2 40 0 %preset% 0 1 %preset% 1 5 %preset% 2 9 %preset%
3 1337 %node% 1 59 %preset% 0 999 %preset% 1 777 %preset% 2 555 %preset%
3 333;
#X msg 80 125 store \$1;
#X msg 80 74 recall \$1;
#X msg 30 73 purge;
#X msg 20 51 reset;
#X msg 80 174 clear \$1;
#X obj 20 231 print hub_test_says;
#X obj 376 50 cnv 15 159 290 empty empty empty 20 12 0 14 #dcdcdc #404040
0;
#X msg 447 139 store \$1;
#X msg 455 80 recall \$1;
#X floatatom 447 115 5 0 0 0 - - - 0 0 1, f 5;
#X msg 395 79 purge;
#X msg 386 57 reset;
#X msg 447 190 clear \$1;
#X floatatom 447 166 5 0 0 0 - - - 0 0 1, f 5;
#X obj 386 217 preset_hub another %hidden% %node% 1 33 %preset% 0 99
%preset% 1 65 %preset% 2 123 %preset% 3 0 %node% 2 40 2 %preset% 0
19 %preset% 1 0.23 %preset% 2 999 %preset% 3 0.01;
#X obj 386 244 print hub_another_says;
#X obj 20 268 hub_node_abs;
#X obj 386 270 preset_node another;
#X obj 188 51 preset_node test;
#X obj 188 135 list;
#X msg 226 71 aaa 32 1;
#X msg 236 91 2.24 nlah 1;
#X obj 188 157 print ----result----;
#X msg 241 111 list 1 2 3 4;
#N canvas 778 51 404 229 sub 0;
#X obj 237 69 preset_node test;
#X floatatom 237 92 5 0 0 0 - - - 0 0 1, f 5;
#X obj 113 69 preset_node another;
#X floatatom 113 91 5 0 0 0 - - - 0 0 1, f 5;
#X text 111 41 a preset in a subpatch;
#X connect 0 0 1 0;
#X connect 2 0 3 0;
#X restore 119 292 pd sub;
#X text 91 495 reset;
#X text 92 804 anything;
#X text 91 455 purge;
#X text 91 475 recall;
#X text 91 515 store;
#X obj 381 305 cnv 15 44 27 empty empty empty 20 12 0 14 #c4dcdc #404040
0;
#X floatatom 386 310 5 0 0 0 - - - 0 0 1, f 5;
#X obj 80 52 hradio 15 1 0 4 empty empty empty 0 -8 0 10 #fcfcfc #000000
#000000 0 1;
#X floatatom 80 102 5 0 0 0 - - - 0 0 1, f 5;
#X floatatom 80 151 5 0 0 0 - - - 0 0 1, f 5;
#X obj 455 58 hradio 15 1 0 4 empty empty empty 0 -8 0 10 #fcfcfc #000000
#000000 0 1;
#X obj 98 1258 pddp/pddplink preset_node-help.pd;
#X text 178 515 - store the current state at index n;
#X text 98 1230 Scope- [preset_hub foo] is local to its patch and all
of that patch's children (i.e. \, subpatches and abstractions).;
#X text 178 455 - purge all orphaned/unused nodes;
#X text 91 356 clear;
#X text 178 356 - clears preset n for all nodes;
#X obj 483 4 preset_hub %hidden% %node% 2 11 1 %node% 3 11 3 36;
#X obj 189 271 preset_node test;
#X floatatom 189 299 5 0 0 0 - - - 0 0 1, f 5;
#X msg 198 211 purge;
#X msg 189 189 reset;
#X msg 249 210 clearall \$1;
#X floatatom 249 189 5 0 0 0 - - - 0 0 1, f 5;
#X msg 232 244 set another;
#X msg 311 244 set test;
#X text 171 947 - OPTIONAL scope for this preset (defaults to null
or "");
#X text 178 495 - reset all preset node data (wipes hub clean);
#X text 91 640 read;
#X text 81 967 2) symbol file;
#X text 81 1057 3) float;
#X text 91 706 write;
#X text 91 726 readpreset;
#X text 178 726 - read one preset (optional 3rd argumemnt \, otherwise
preset 0) from a file named in the second argument;
#X text 91 759 writepreset;
#X text 178 759 - write one preset (optional 3rd argumemnt \, otherwise
preset 0) to a file named in the second argument;
#N canvas 186 348 428 292 More_info 0;
#X obj 30 165 cnv 15 349 98 empty \$0-pddp.cnv.subheading empty 3 12
0 14 #b8b8b8 #000000 0;
#X obj 31 166 cnv 15 347 96 empty \$0-pddp.cnv.subheading empty 3 12
0 14 #fcfcc4 #000000 0;
#X obj 1 1 cnv 15 425 20 empty \$0-pddp.cnv.subheading empty 3 12 0
14 #c4dcdc #000000 0;
#X text 7 1 [preset_hub] More info on scope;
#X text 19 37 To get a better idea of how [preset_hub] scope works
\, open another copy of this help patch \, and notice that recalling
values in one copy doesn't affect the other one.;
#X text 19 97 Similarly \, if you have [preset_hub foo] inside abstraction
[bar] \, it is guaranteed to apply only to that abstraction instance
(and its children)-- even if you put another [preset_hub foo] on the
same canvas as the abstraction:;
#X text 40 231 [bar] <-- [preset_hub foo] inside here;
#X text 168 187 it has its own [preset_hub foo];
#X text 168 205 inside it.;
#X text 40 171 [preset_hub foo] <-- this won't apply to [bar] because
;
#X restore 466 1230 pd More_info;
#N canvas 33 29 755 637 More_info 0;
#X obj -9 -1 cnv 15 755 20 empty \$0-pddp.cnv.subheading empty 3 12
0 14 #c4dcdc #000000 0;
#X text -3 1 [preset_hub] More info on reading/writing operations;
#X obj 19 159 hradio 15 1 0 4 empty empty empty 0 -8 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 19 179 recall \$1;
#X obj 85 159 hradio 15 1 0 4 empty empty empty 0 -8 0 10 #fcfcfc #000000
#000000 0 1;
#X msg 85 179 store \$1;
#X floatatom 10 390 5 0 0 0 - - - 0 0 1, f 5;
#X symbolatom 10 433 10 0 0 0 - - - 0 0 1, f 10;
#X msg 151 179 reset;
#X text 303 509 Loading a preset into a hub that already has data will
automatically result in a merge. As you experiment with mixing and
merging various presets \, notice how nodes in a preset that do not
have the right match in the current patch will be silently discarded
to minimize clutter among presets., f 71;
#X msg 9 28 read preset_hub_all.preset;
#X msg 9 83 readpreset preset_hub_one.preset;
#X obj 9 303 print preset_hub_another_says;
#X text 303 581 NB: check for write permissions before trying to save
files into specific folders., f 71;
#X msg 151 205 clearfileloc;
#X msg 151 225 initfileloc;
#X msg 151 245 updatefileloc;
#X msg 9 49 write ~/Desktop/preset_hub_all.preset;
#X msg 9 104 writepreset ~/Desktop/preset_hub_one.preset 1;
#X obj 9 282 preset_hub anotherone file %hidden% %node% 1 20 %node%
1 21;
#X obj 10 368 preset_node anotherone;
#X obj 10 411 preset_node anotherone;
#X text 303 26 Notice how when trying to read a preset you get a warning
that the file locations have not been initialized? To fix this \, press
either initfileloc or updatefileloc. Doing so will create a current
snapshot of node locations. Why is this important? Because as you edit
the patch and move things around \, node locations (on which preset_hub
depends to locate them) may change. While this is dynamically updated
when using embedded presets inside the patch itself \, previously saved
files with its stored node locations have no way of knowing that there
have been any changes which may result in nodes not being found and
therefore presets not loading properly. This is why we have the fileloc
commands. Using them \, the user has the ability to decide when the
snapshot should be taken (e.g. usually once you are happy with the
layout and do not see major new changes taking place). At that point
in time \, such a snapshot will keep the file-related locations and
will not change them unless explicitly requested by the user. These
will be kept in parallel with the dynamic (actual) ones. This way \,
once an old preset file has been loaded \, its node locations will
be compared with the patch-save file locations which should remain
the same regardless of how the nodes change their locations in the
patch., f 71;
#X text 303 280 So \, what do each of these three commands do? clearfileloc
clears all file loc data. Without such data you will not be able to
save preset files (whether whole preset_hub state or a single preset)
and will get a warning when trying to load one. initfileloc initializes
all locations \, while updatefileloc only updates ones that have not
yet been initialized. This last option is \, for instance \, useful
when you are editing a well-established patch that already has file
locations included and then add a new node that doesn't., f 71;
#X text 303 391 With the file locations taken care of \, click on read
to read all presets stored in a separate file. Try recalling presets
0-2 \, Note how storing a new preset does not make the patch dirty
due to the use of the "file" flag., f 71;
#X text 303 450 Now \, reset the hub by clicking on the "reset" message.
The hub should be now clear of any presets. Then \, read a single preset
by clicking on the readpreset message on the left. Notice how only
preset 1 has any data., f 71;
#X connect 2 0 3 0;
#X connect 3 0 19 0;
#X connect 4 0 5 0;
#X connect 5 0 19 0;
#X connect 6 0 20 0;
#X connect 7 0 21 0;
#X connect 8 0 19 0;
#X connect 10 0 19 0;
#X connect 11 0 19 0;
#X connect 14 0 19 0;
#X connect 15 0 19 0;
#X connect 16 0 19 0;
#X connect 17 0 19 0;
#X connect 18 0 19 0;
#X connect 19 0 12 0;
#X connect 20 0 6 0;
#X connect 21 0 7 0;
#X restore 466 1375 pd More_info;
#X text 98 1651 Presets with Arrays- arrays cannot be accessed directly
as they have no direct inlets and outlets. For this reason we use preset_node_array
abstraction to read/write to/from arrays. For additional info see;
#X obj 290 1690 pddp/pddplink preset_node_array-help.pd;
#X text 81 947 1) symbol/float;
#X text 98 1276 Modular Scope- arguments starting with \\$ (e.g. \$1
or \$2blah) allow modular creation of preset_hub and node's scopes
inside embedded abstractions. As long as both hub and node share the
same scope \, they will see each other regardless of what scope is
given them at creation time \, including no scope at all (as is the
case with the rest of pd-l2ork \, \$1 with no argument given reverts
to 0).;
#N canvas 186 348 429 332 More_info 0;
#X obj 1 1 cnv 15 425 20 empty \$0-pddp.cnv.subheading empty 3 12 0
14 #c4dcdc #000000 0;
#X text 7 1 [preset_hub] More info on modular scope;
#X obj 39 98 preset_hub \$1 %hidden% %node% 1 7 %preset% 0 555 %preset%
1 444 %preset% 2 333 %preset% 3 222 %preset% 4 111 %preset% 5 0;
#X msg 39 63 store \$1;
#X msg 106 63 recall \$1;
#X floatatom 39 42 5 0 0 0 - - - 0 0 1, f 5;
#X floatatom 106 41 5 0 0 0 - - - 0 0 1, f 5;
#X obj 38 135 preset_node \$1;
#X floatatom 38 157 5 0 0 0 - - - 0 0 1, f 5;
#X text 142 39 <-- recall presets 0-5;
#X text 73 155 <-- note how the value changes with each recall;
#X text 34 191 Notice how the hub and node are paired even though no
optional argument has been given to this patch?Note that in this
case [preset_hub \$1] is different from [preset_hub] as latter actually
is defined as null symbol or "" while former is equal to float 0 (if
no argument is given). This hub-node pairing is also independent from
anything found in parent patch since node has found its match in this
patcher before looking one level up.;
#X connect 3 0 2 0;
#X connect 4 0 2 0;
#X connect 5 0 3 0;
#X connect 6 0 4 0;
#X connect 7 0 8 0;
#X restore 466 1276 pd More_info;
#X text 178 475 - recall the values stored at index n (n must be >=
0);
#X text 98 1604 Default values- depending on the expected data format
messages when supplied no argument default to null (empty string) or
0;
#X text 98 1196 Preset names- only values 0 or greater are valid. No
negative preset numbers are possible.;
#X text 91 535 sort;
#X text 178 535 - sort all presets chronologically and assign them
new preset numbers one after another starting with a value n or 0 if
no value provided;
#X text 178 640 - reads all presets from a file named in the first
argument;
#X text 178 706 - write all presets to a file named in the first argument
;
#X text 91 581 status;
#X text 178 581 - outputs status via outlet whether any of hub's nodes
have been altered since the last time a preset was stored (0=no \,
1=yes) \, effectively reporting if the current hub's state is saved
or not (also referred to as dirty);
#X text 169 804 - print message in response to input followed by 1
for successful and 0 for failed operation. Some messages provide value
pairs (e.g. store and recall) where first value reflects requested
preset number and second value reflects whether this action was successful
or not (1 or 0). For example \, hub outputs status message whenever
either hub receives a status message \, or is requested status from
one of its nodes. This allows for implementing visual cues for reminding
user that hub's latest state has not been saved.;
#X msg 403 101 status;
#X text 91 660 updatefileloc;
#X text 91 376 clearfileloc;
#X text 178 376 - clears all node locations (used for saving presets
to a file only--see the arguments and more_info sections below);
#X text 91 409 initfileloc;
#X text 178 660 - updates current known node locations for nodes that
do not have this data initialized (used for saving presets to a file
only--see the arguments and more_info sections below);
#X text 178 409 - initializes all node locations to be equal to their
current locations (used for saving presets to a file only--see the
arguments and more_info sections below);
#X text 98 1375 Writing to and reading from a file- preset_hub can
also write to an external file and read from it. More so \, the optional
2nd creation argument (literal symbol "file") prevents preset_hub from
trying to save itself into the patch. Hub can read/write all preset
states (read/write) or a select preset (readpreset/writepreset). Resetting
of hub's previously stored data must be done manually by the user.
Otherwise \, loaded data will be merged with the data already found
in the hub. Only valid nodes will be imported. Node data that does
not have a valid node in the existing patch will be silently dropped.
Reading a single preset will automatically recall it as soon as the
preset has been loaded. Initializing node locations to be saved is
essential to ensuring that as the patch continues to be edited and
node locations potentially changed \, the preset(s) saved into file(s)
prior to these changes will be still able to locate their nodes. See
subpatch to the right for more info.;
#X text 171 967 - OPTIONAL literal "file" argument instructs hub not
to embed its preset data into the patch but rather assumes that the
user will save this data into an external file (see read \, write \,
readpreset \, and writepreset messages above)--this also means that
changes to the preset will not trigger "patch dirty" message;
#X text 171 1057 - OPTIONAL argument used exclusively in the K12 mode
that renders preset_hub invisible to GUI operations.;
#X text 171 1096 IMPORTANT! Since December 2022 \, all pd-l2ork patches
now have an invisible preset_hub with the k12 scope that is instantiated
at creation time. This is because K12 mode is now togglable at runtime.
This also means that the k12 scope (note the lowercase 'k' in k12)
is now reserved for internal use and should not be used for other purposes.
;
#X connect 15 0 21 0;
#X connect 16 0 15 0;
#X connect 17 0 15 0;
#X connect 18 0 15 0;
#X connect 19 0 15 0;
#X connect 20 0 15 0;
#X connect 23 0 30 0;
#X connect 24 0 30 0;
#X connect 25 0 23 0;
#X connect 26 0 30 0;
#X connect 27 0 30 0;
#X connect 28 0 30 0;
#X connect 29 0 28 0;
#X connect 30 0 31 0;
#X connect 33 0 47 0;
#X connect 34 0 35 0;
#X connect 35 0 38 0;
#X connect 36 0 35 0;
#X connect 37 0 35 0;
#X connect 39 0 35 0;
#X connect 48 0 17 0;
#X connect 49 0 16 0;
#X connect 50 0 20 0;
#X connect 51 0 24 0;
#X connect 59 0 60 0;
#X connect 61 0 59 0;
#X connect 62 0 59 0;
#X connect 63 0 59 0;
#X connect 64 0 63 0;
#X connect 65 0 59 0;
#X connect 66 0 59 0;
#X connect 94 0 30 0;
