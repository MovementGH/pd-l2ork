PD-L2ORK TODO:
*Update all releases (where possible) to nw.js 0.67.1.
  *Test nwjs 0.67.1 for regressions:
    *Patch window positioning: loading saved one (offset issues), and scripted ones (e.g. spectrogram inside pitch relationships patch).

*Opening and closing window via a script does not reopen the window in the same place nor with the same size. Same is true for saving a patch and reopening it. Affects Linux running nw.js 0.28.1. Need to test with the latest nw.js.
  *Investigate index.js' nw_create_window, and the pdgui.js' canvas_check_geometry.
  *Also use index.js console positioning aspect, if necessary.

*Scripted resizing of patch windows keeps recreating the window and, when done fast, can result in stale windows. See 1497602807047-pd-msg/pd-msg/1.msg_and_patch/6.relocate_windows.pd.

*Add canvas options for nomenu, background color, draw border, and ontop (if it works in nw.js). Test noscroll option.

*When closing the patch, make sure that the dialog is always centered? This is a low priority item.

*Pick the best nw.js (==> denotes the current choice)
  *Current status:
    0.28.1 next/prev option does not work.
    0.28.3 next/prev option does not work.
RPI 0.28.4 current RPi version.
    0.40.2 next/prev option does not work.
    0.41.3 next/prev option does not work.
    0.42.3 next/prev option does not work. on a dark theme in Linux menu items are not visible.
    0.42.4 register_window_id not found error. does not display anything. everything from here below has CMD+(1-9) broken on OSX when keeping the nw2 option enabled.
    0.42.5 register_window_id not found error.
    0.42.6 register_window_id not found error.
    0.43.0 register_window_id not found error.
    0.43.1 register_window_id not found error.
    0.43.2 register_window_id not found error.
    0.43.3 register_window_id not found error.
    0.43.4 register_window_id not found error.
    0.43.5 segfaults on Linux when opening dev tools.
    0.43.6 segfaults on Linux when opening dev tools.
    0.44.0
    0.44.6 everything from here works with next/prev window and Pd window options.
    0.54.0
    0.56.0
    0.58.0
    0.59.1
    0.60.0 everything form here below also has incorrectly placed windows when using nw2 option.
    0.60.1 everything above this ocassionally crashes on OSX due to lack of a fix introduced in 0.60.1
    0.62.1
    0.62.2
    0.63.1 crashes on Linux.
==> 0.67.1 
    0.68.0 window close nw1 bug (see #7981 nwjs bug report).
    0.69.1 window close nw1 bug (see #7981 nwjs bug report).
    0.70.1 window close nw1 bug (see #7981 nwjs bug report).
  *Need to figure out what is slowing down nw2 on versions 0.42.3, so that we can get away from all the weird idiosyncrasies with window positioning and other issues.

*Port:
  *cyclone
    *mousestate
    *mousefilter
    *active
    *comment
  *tof
    *breakpoints
    *breakpoints~
    *folderpanel
    *menubutton
    *pmenu
  *vanilla
    *openpanel?
    *new patch offset (Every "new" window is a bit shifted so it does not appear perfectly superimposed)
    *listbox gatom
    *file
    *garrays to set colors, line width, visibility, display style and disable mouse editing
    *force close pd instance to ensure there are no stray ones left? (sounds potentially counterproductive given we also have -unique flag)

*Ubuntu 22.04 build: investigate iem16 build issues and gmerlin library support. 20.04 uses 1.16 automake and 2.69 autoconf. 22.04 uses 2.71 autoconf and ??? automake.

*HDMI audio output support (RPi).

*Add reset preferences to default option in the settings and check if the default settings are correct (OSX is ok, as is Linux).

*Enable reindexing without restart
  *Add a button in preferences
  *Make sure indexing also covers the extra folder, as well as the user folder.

*Submit patch to js external github.

*Consider adding ability to display array name that is other than the internal name (e.g. so that we don't have to use $0, $1, _ etc. in the name).

*Error closing a new window because there is no "width" property (e.g. a subpatch has been created). Only affects RPi version of nw.js? Consider bumping the RPi nw.js version...

*Consider adding tiled version of an image inside ggee/image.

*refine window heights for various dialogs, so that they always display fully on-screen. UPDATE: check if this has been fixed using latest nw.js (affects only Windows).

*port shell object to Windows?

*add bezier curve drawing ability to the arrays (currently displaying them as polygons).

*tooltips.

*K12 menu/mode.

*fix inefficiency of the profuse console output.

*Fix build system inconsistencies.
  *Make incremental on a Mac results in a broken build that does not include Gem.
  *Repair light build on OSX. Test it on other platforms.

*think about a way to deterministically inform both front-end and the back-end that the canvas has indeed loaded. See https://stackoverflow.com/questions/4057236/how-to-add-onload-event-to-a-div-element/55106785#58838457 (Third Attempt (and Definitive Solution))


RARE:
*sometimes closing a newly created window before it has posted or possibly creating two windows by quickly double clicking on a subpatch irreversibly breaks the front-end. Need the better checks'n'balances.

*occasionally when editing a new object text is not displaying until you click outside it. happened with the modulo object.

*check for stray/sporadic bug where bang and other objects stop working and bang object gets stuck in on mode until the mouse is moved (nw.js bug? UPDATE: it appears at least one of the sources was a bug in the scroll_to_gobj call that was fixed on 2021-11-01).

*Sometimes editing message resizes the object size without erasing text. Is this a nw.js bug?

*Textbox still sometimes loses all its text (get a console error resizebytes being out of memory).

*Space in path (e.g. username) makes installing apps in the user folder fail.
  *Tested and cannot reproduce. Looks like a permissions issue, perhaps?


MAYBE:
*gui_canvas_scroll_to_gobj should only scroll to an object if doing so improves situation (e.g. if the object is wider than the screen, then scrolling won't fix anything)?

*add ability to custom name each instance of pd-l2ork (pd~?).




PD-L2ORK DONE:
*Add focus/commit to numbox2
*Add output option whenever an arrow up/down is pressed on the numbox2 while it is activated (with or without shift)
*Add interactive flag to gatoms and all iemguis that can be interacted with (gatom, tgl, bng, number2, vslider, hslider, vradio, hradio, knob, mknob)
*Gatoms need to be interactive by default
*Fix weird coloring of the mknob
*Update help files
*gatom when edited from larger length to smaller, ends up having garbage (e.g. one that has 3 chars or numbers, activate it, and then start typing--after first char you end-up having garbage there) ONLY APPLIES TO THE 0 width gatoms (both text and number ones)
*"sorry, I could not find the source of that error" should be message if it is a message and not an error
*clicking on find box and then onto the canvas makes canvs interpret it as a selection box
*pressing return with the find bar open after you've already found an item and with the item deselected, does not reinitiate search
*search unable to find a phrase embedded inside another word (e.g. $1-local-$5-blah will not be found when searching for $5)
*Fixed netserver's extraneous benign errors: netserver: Resource temporarily unavailable (11) and netserver: could not send data to the client (including a typo)
*object width that is wider than text width due to the number of nlets when being edited does not size itself properly
*add copy option to gatoms (add the gatom value to the clipboard)
*Revamped the search box fixing bugs, regressions, and adding missing features.
  *Fixed HTML bug in pd_canvas.html
  *Added ability to properly detect wholeword vs partial word search
  *Ensured that when clicking on the find bar the click does not propagate onto the canvas, which could cause erroneous selection boxes and other issues.
  *Made sure that the existing selection box upon invoking the find bar is properly handled with a fake mouseup event.
  *Ensured that when one changes whole word option or deselects last found object, the search process restarts from the beginning.
  *Made it possible to search for A_DOLLAR inside an A_DOLLSYM (e.g. searching for $3 inside blah-$3-something would erroneously yield no results).
*More stability improvements to the maxlib/netserver.
  *Fixed extraneous benign errors due to the use of the new non-blocking mode. Made default debug output more conservative.
*fixed activated text box size and side-stepped the cord update issue, updated close dialog animation.
  *When text box is activated and the number of inlets or outlets requires that the object be wider than its text or specified width, the object now specifies appropriate width.
  *During editing because updating cords is not currently easy to do given that this logic is now spread across both nw.js and C, the edited object now has an aura (achieved through CSS) that ensures that the cords at least appear to fade out into nothing during the editing process, until the object is deactivated, at which point the C code will update cord locations.
  *Closing dialog is now animated and makes the visual experience a bit "smoother".
*add click mode 3 for the ggee/image that allows for tracking the cursor whithout preventing the passing of the click to objects below.
  *Updated core pd-l2ork engine behavior to allow for passing of pointer behavior to passthrough objects even if
   an object is grabbed.
  *Ensured proper stacking order (top to bottom).
  *Updated dialog and help files.
*Fixed a bug where opening recent image-help.pd file inside an instance of pd-l2ork spawned f
rom a command line, causes error when trying to open the image file associated with the image obje
ct because of nw.js' inability to handle relative paths provided by the pd-l2ork engine.
*Cosmetic fixes to help files
*Fixed bug where select all inside the dialogs (when selecting a text or numbers) on OSX selects canvas objects instead. Added ctrl/cmd+w for closing all dialogs that bind to the pdgui.dialog_bindings(windowname). Added ctrl/cmd+a for selecting text and numbers only on all dialogs that bind to the same call.
*Major regression: passthrough is not mapping properly inside GOP.
  * Required changes to the ggee/image and the core behavior inside g_editor.c and g_graph.c
  * Passthrough mode did not work after an object inside GOP has been grabbed.
  * x were y are off inside GOP.
  * Checked the mouseup event.
*Fixed regression on how the activated objects behave on the right edge and other object resizing logic.  
  * Added logic for providing nw.js with the activated object's number of nlets, which will help determine whether the object should automatically resize its width based on the text width (objects with more than 2 inlets or outlets will need to remain the same size, so as not to introduce dangling patchcords, since we have no way to update patchcord position until the object has been deactivated).
  * Fixed regression how the objects did not resize properly due to addition of the pixel-based width for an object to ensure the object with more than 1 in/outlet keeps its width.
  * Ensured that objects on the right edge do not get activated with more lines than they have deactivated (linked to problems above).
*Vastly improved performance using the new passthrough mode. Changed how the passthrough mode 3 communicates mouse events.
*Updated image help file and its dialog to reflect changes in image behavior.
*Updated the install README.
*Fixed a long-standing pd bug where resizing a text object whose x1 and y1 overlap with another one above it results in the wrong object being resized.
*Fixed a long-standing bug where trying to connect an object whose outlet we wish to connect from is partially covered by another object which has no outlets (e.g. comment), even though the connection cord is initially created, it does not want to connect to other objects (inlets are not highlighted and upon releasing the mouse button, the connection never happens). This is because previous logic relied on canvas_findhitbox which is not checking whether objects have nlets, so it returns topmost object, rather than the topmost one with outlets (which is the one we started connecting from).
*Fixed a bug where scroll_to_gobj (e.g. when using "find" feature) would be called before a new window is properly registered, and, as a result it would trigger a js error. Now, it waits until the window is properly registered.
*Fixed a bug where calling "find again" in a subpatch that was opened by a "find again" request, gives wrong result. Further refined the previous bug-fix.
*Reworked the find logic when searched across multiple windows and with multiple search bars open. Whenever search reaches a subpatch with an open search bar, it closes it to minimize confusion. Find again always goes back to the current search scope (toplevel patch) and search word until user clicks on a search button in any find bar (at which point that becomes the toplevel patch with its search text.
*Added highlight for gatoms when being edited directly by user (when pressing enter).
*Added highlight for numbox2 when being edited directly by user (when pressing enter).
*It appears on Ubuntu 20.04, large windows get automatically maximized. This adversely affects Tweeter appearance. The only way to fix this is to adjust Ubuntu settings by typing "gsettings set org.gnome.mutter auto-maximize false". Later, we will look into adding "maximizable" and other options from 1.x and beyond to the window management.
*Fixed a bug where mycanvas dialog says image width instead of rectangle width. Fixed co-dependence of the dialog_image and dialog_iemgui and added missing translation entries for fr and de translations.
*Fixed weird message resizing issue that causes text inside to be partially invisible and to scroll.
*Fixed a regression where sometimes copying stops working, triggering the following error: TypeError: Cannot read property 'classlist' of undefined.
*Fixed the defunct moonlib/image external. Marked it as loudly as possible as defunct.
  *selection rectangle is off.
  *clicks still register in GOP patches (likely core fix).
  *border highlights inside GOP patches.
  *error reopening a patch once it has been saved and closed (works fine on first try--likely path issue).
  *weird repositioning and visibility issues inside GOP.
  *size should automatically readjust.
*Fixed memory leaks with moonlib/image.
*Implemented batch image loading for ggee/image, so that it can handle image sequence (akin to moonlib/image).
*Updated ggee/image and moonlib/image help files accordingly.
*Overhauled tof/imagebang to work in Pd-L2Ork. Updated help file and removed questionable help file content.
*Updated moonlib/image and tof/imagebang to consistently support both relative and absolute paths of images.
*Updated moonlib/image to address the bug where opening an image after setting a preloaded one did not immediately update the image. Further refinements to the help file.
*Fixed regressions where images did not display properly (or at all) on Windows. Removed flicker on moonlib/image. Updated help files for tof/imagebang and moonlib/image.
*Removed unnecessary error message from the ggee/image.
*Improved all dialogs that have dynamic updating of fields to ignore calls while the window is still being created.
*Refined delayed scroll during find (when a subpatch needs to be opened), so that it checks when the window is ready. Improved scrolling logic for windows whose leftmost and topmost coordinate may be negative.
*Added dynamic field updating for the gatom dialog for interactive and exclusive options.
*Added to all the various core iemgui object options ability to autoupdate fields inside their dialogs (if any). Exposed numbox' drawstyle and autoupdate as a patching message. Additions to help files and cosmetic fixes.
*Fixed size redrawing bug in the moonlib/mknob and ensured that its values also autoupdate when the dialog is open.
*Minor cosmetic refinements to deprecated objects.
*Improvements to the flatgui/knob, including width for the dial, off and on segments of the dial circle, automation of the dialog fields (when open), additional translation options for the new fields, and other minor bug-fixes.
*Updated miXed/cyclone to support all the file i/o features (e.g. coll object) replacing non-functioning legacy calls. Fixed a bug in coll object where it did not report all load/save calls via its 3rd outlet.
*Improved keyboard shortcuts for the text editor widget (used by "text define" and various cyclone library objects, such as coll).
*Fixed regression in scroll_to_gobj that is triggered when doing find/findagain request and which could trigger an error due to window not having been created yet, breaking the UI.
*Vastly improved find/find again behavior that now detects also matches in object's sends and receives.
*Removed leftover debugging printout message in find_ignore and legacy warning for the color saving format for the iemgui objects.
*Deal with array manipulation and data structure drawing location issues.
  *fixed being unable to click on arrays both within GOP and toplevel, including having multiple arrays and the ability to click either of them. Note that when an array has jump-on-click (joc) enabled, it will override any clickable array since it takes entire size of the array window.
  *changed the cursor appearance when manipulating arrays.
  *toplevel window with an array should not have any scrollbars.
  *fixed a bug where array_joc did not get updated when invoked from the toplevel window array properties.
  *scalar subpatch does not update appearance when the patch window is resized.
  *scalar selection box in a subpatch (see disis_wiimote-help.pd subpatch with 4 blobs) is inacurate and larger on the left side as you move the scalar further to the right.
*When opening a GOP-enabled patch whose gop rectangle should not be drawn because subpatch has only scalars, you can still resize the parent GOP size (cursor changes to resize arrows).
*Fixed a bug where comments exceeding 1024 characters got malformed when being sent to the engine.
*Fixed helplink not being able to revert to its reformatted text after being activated. Updated pddplink to use the new method to avoid it being redrawn in a wrong z order from the other objects on canvas.
*Receive is now reconfigurable, just like the send object, when its scope is empty (or equal to &s_). updated supporting help file.
*Fixed a bug where large text boxes with line break on a hyphen spilled over the box boundaries (originally detected in the filter-remote-admin-messages in the L2Ork-Tweeter-Server).
*Added ability for the netserver object to disconnect clients based on their socket number, updated and improved both netserver and netclient help files.
*Reworked pasting of patch content (copyfromexternalbuffer) directly into the patch to ensure that optional width info (provided as , f <width>;) is reformatted as a new line #X f <width>; and previous line terminated by a ;.
*Further adjustments to the copyfromexternalbuffer to address idiosyncrasies of Windows.
*Revised and finished context help patch dealing with $0, $1, and $2 (all_about_scope_and_locality.pd).
*Array editing cursor should revert to regular cursor upon right-click (and revert afterwards).
*Fixed Gem not building properly on newer msys2 installs.
*Finished renaming the remaining instances of purr-data to minimize confusion between the two releases.
*Fixed a bug where searching for an expression also incorrectly highlighted a canvas containing such an object even if the canvas did not have the expression in its name (e.g. searching for $1-overdrive inside L2OrkTweet.pd version 0.63 incorrectly highlights subpatch containing the expression).
*Made redrawing of canvases after changing option for curved cords more robust, avoiding redundant redraws. Fixes errors printed to the console.
*Fixed a bug where the hand grabbing cursor during connecting reverted back to cursor_editmode_nothing as soon as the mouse moved after initiating the connecting action by clicking on the outlet.
*Fixed a bug where netserver was not correctly freeing disconnected clients and updating the number of clients.
*Added option for netserver to adjust the threshold for the number of failed packets sends before disconnecting the user server-side. This is typically used when a client disconnects in a way that does not give the netserver opportunity to receive disconnection notice.
*Fixed a crasher with netserver due to static use of inbinbuf which causes netserver to crash when running two instances with no creation argument. By default implicit port of 0 successfully instantiates the object. However, the object is not functional.
*Removed the threshold option on the netserver as it resulted in a faulty number of clients reported and unintentional disconnections.
*Updated the build script for sensel and pdjs externals, so that they also work on arm processors (e.g. RPi).
*Updated nw.js on all platforms to 0.28.
*Cosmetic fixes to the sensel external and its README.md.
*Updated Linux deb prerequisites.
*Fixed a bug where Windows sensel external did not work out-of-box.
*Fixed a bug where curved_cords option could not be re-applied until the preferences were reopened.
*Added missing translations for german and french for the General tab in the Preferences window.
*Updated fluid~ external to safeguard against loading files other than sf2, updated its documentation to reflect this, added default soundfont to ensure K12/midi_synth can always have a soundfont available, and updated K12/midi_synth accordingly.
*Fixed bug with array define if one clicks to view the array. This would trigger following errors:
error: array: no method for 'query-editmode'
error: array: no method for 'updatemenu'
error: array: no method for 'mouseup_fake'
error: array: no method for 'magicglass'
*Adjusted vertical position of the X axis labels on the arrays (on by default using array define), so they don't overlap with the array's border.
*Made edit menu automatically toggle options that are applicable to a particular patch. Useful for patches that are not editable (e.g. array window or the "array define" canvas).
*Explored issue with poke~ and the following error warning: extern using garray_getfloatarray() won't work in 64-bit version. UPDATE: This is not an issue but only a warning. It appears not to affect poke~ object. The poke~ documentation has been updated to include information about the bang signal that is meant to request array redraw since the object does not do so manually (as doing so would result in redraw requests on per-sample change and therefore unreasonable CPU overhead).
*Implemened snap to grid option and reworked how the editmode is visually altered when holding the ALT button.
*Updated links to Pd-L2Ork apps to point to the user folder instances, so that they are immediately modifiable, as needed.
*Minor fixes to the Audio-Chat app.
*Initial port of the autocomplete feature (next TODO commit will highlightchanges that still need to be addressed).
*Fixed regression with the merging of the autocomplete patches (canvas properties could not open due to an error).
*Improved dac~ and adc~ help symbols, so that they are properly shown in the autocoplete (was adc~_dac~).
*When closing a gop subwindow, the parent patch should be redrawn to honor ordering of the objects. This is a temporary fix until the proper GOP drawing is implemented.
*A temporary fix for the issue where objects keep redrawing/flickering when using tabwrite and repositioning the GOP array that is visible inside the same patch while in edit mode and with another GOP object being selected (notably K12 object). Up until now, the repositioning was erroneously done on the selected object, rather than the array. Now, the repositioning request uses the tag of the array object and repositions it correctly. This workaround will be removed when the proper GOP drawing is implemented.
*Added external editor to js object for Linux and OSX. Updated js object help file to reflect changes.
*Fixed array put and canvas properties dialogs to accomodate child color picker window.
*Updated js help file to provide additional clarification regarding the compile message.
*Fixed regression on OSX where reopening saved patch resulted in 22px taller patch window than what it was when saved. Bumped installer for non-RPi OSs to 67.1.
*Further refined the js-help.pd file.
*Updated libFLAC linking in the Makefile for the Windows platform due to changed library name.
*Fixed regression where UDP packets were not being sent. This is a legacy object and likely not to be developed further. Small cosmetic changes to the supporting help files.
*Fixed slight visual regression on the Raspberry Pi externals in the K12 library. On image was being drawn over all other GUI elements.
*Cosmetic fix to a documentation patch.
*Improved compiling from source instructions for Linux platform.
*Fixed array put and canvas properties dialogs to accomodate child color picker window.
*Reworking GOP drawing order to allow for partial visibility.
  *Initial commit that enables all iemgui, gatom, comment, and dropdown, as well as gop canvas objects to be drawn as children of the GOP patch they belong to.
  *Fixed ggee/image and flatgui/knob to work with the new GOP drawing approach.
  *Ported pddplink to the new GOP drawing logic. Enabled GOP visiblity of the pddplink (thus forgoing the documentation of the currently undocumented -gop flag, while maintaining backwards compatibility), and fixed two bugs associated with the pddplink drawing.
  *Fixed moonlib mknob and image objects to support new GOP drawing order.
  *Updated Scope~ to work with the new GOP drawing order.
  *Fixed inconsistency inside graph_vis. Needs to be further tested.
  *Fixed Scope~ object not highlighting properly when selected (and not highlighting inside a GOP subpatch even when the GOP is selected, as it should).
  *Updated pianoroll to work with the new GOP drawing. Updated the external dialog to better accommodate its parameters.
  *Pianoroll now gets properly highlighted when selected (only when toplevel)
  *Additional fix for pianoroll (forgot annother gui_gobj_new call)
  *Fixed the way pianoroll is drawn (removed redundant border), made its selection box wider to make it easier to spot.
  *Fixed image object showing through GOP window when the GOP patch is selected and when all inside objects should not be visible.
  *Updated grid object, correcting a number of bugs, including point being visible when the GOP is selected, and autoupdating of the point location when the grid is resized.
  *Refined selection box for the grid object.
  *Ported room_sim_2d and room_sim_3d to the new GOP drawing method. Made selection outline properly colored and more easily visible.
  *Added support for arrays (inside GOP or toplevel). Additional debugging commands (while working on other types of scalars).
  *Bugfix for GOP array drawing, accounting for issues associated with creation, and for changing of array properties. This one should be universal and much better than previous approaches.
  *Reenabled proper coloring of dirty abstractions (GOP and non-GOP).
  *Fixed a bug where patches with non-array scalars were not editable.
  *Fixed non-array scalars being displayed incorrectly both on toplevel and inside a GOP subpatch.
  *Made sure that subpatches are not marked dirty when displayed or manipulated, only the abstractions.
  *Ported scalars to work with the new GOP drawing approach. Fixed a long-standing bug with scalars not having correct selection box.
  *Removed redundant selection inside a toplevel array after applying new properties. This should not happen because the array window should not be editable.
  *Fixed a bug where array is slightly offset downwards inside a toplevel window after applying new properties.
  *Fixed regression where fake keyup was not registered anymore on canvasobj (see pd_canvas.js' target_is_canvasobj).
  *Fixed GOP subpatch/abstraction titles to be located under the objects for legacy purposes. This only affects GOP enabled patches on their parent canvases. Other text (including arrays) is always on top, which makes more sense for readabaility purposes. LATER consider making this a legacy flag option. The benefit of keeping it this way is so one can continue to use such patches without hide text which should be reserved for K12 objects, for instance, to prevent their editability and potential new user confusion with the complex object appearance and its potential breakage due to a typo/insertion/deletion. On the other hand, keeping text visible, yet covered by another object, enables its visibility when a user wants to edit things (e.g. L2Ork-Tweeter parts). Otherwise, it is invisible.
*Fixed disis_gpio external and updated build script to accommodate changes.
*Fix OSX build on Xcode 14.
*Add new accelerated version of Gem to OSX.
*Fixed OSX code signing and mic and camera permissions on Catalina and newer.
*Improved deb dependencies.
*Fixed dropdown menu offset due to new GOP drawing implementation (only affected menu belonging to a dropdown two or more levels deep).
*Fixed regression where deselect single GOP patch deselected all of them.
*Fixed highlighting of message and number2 objects using newly implemented GOP drawing approach.
*Fixed incorrect drawing of GOP objects when placed in a negative X or Y location on canvas.
*Improvements in handling OSX menu bar.
*Fixed positioning of the data structures inside a GOP (e.g. nunchuk joystick crosshair inside disis_wiimote-help.pd). Ensured that scalars properly adjust position and drawing aspect ratio based on the GOP window resizing and how they are drawn 2 levels deep inside a GOP (GOP inside a GOP).
*Fixed positioning of the dropdown for autocomplete in a patch that has top-left corner with negative coordinates. Made the autocomplete scrollable (rather than fixed to the position relative to the viewport). Both new_obj_textarea and autocomplete are placed below the scrollbars.
*Made autocomplete switch above the object if it does not fit into the window (like dropdown), but only if it can fit above. Otherwise, we leave it below.
*Fixed buggy coloring of the abstraction outline when dirty (or subdirty).
*Reenabled autopatching while typing an object name.
*Reworked dependencies for Linux to support Ubuntu 22.04.
*Updated Linux and Windows build to use latest nw.js.
*Updated the RPi build to use the closest version to that of the desktop (0.40.3 for RPi and 0.42.3 for desktop).
*Fixed regression where cut/copy/paste/select all did not work inside edited text boxes.
*Fixed the regression where array on a parent patch that was also a GOP subpatch did not get displayed properly. Turns out legacy repositioning code that wasn't removed was the culprit. This also vastly simplifies the garray drawing.
*Made scalars without a template a visible/selectable/movabel/deletable square, as is the case with vanilla.
*Ported and improved ggee/envgen external. This one is marked legacy and is currently not being developed further. May revisit this later by enabling visual resizing and deleting of objects.
*More envgen improvements to the envgen documentation and a bugfix in sustain/release implementation.
*Ported imagebang to the new drawing logic.
*Ported helplink to the new drawing logic.
*Added main Gem library git submodule with latest updates and updated build scripts for OSX and Windows and tested that it works on Linux, as well.
*Added option on the general preferences tab for when nw.js is downgraded to delete the nw.js user data folder.
*Updated K12 Rpi GPIO abstractions to avoid unnecessary console output and potential errors opening GPIOs due to bad timing.
*Merged latest autcomplete improvements in Purr-Data with additional bug-fixes.
*Fixed OSX having inconsistent positioning of the new patches (file->new) likely due to a bug in nw.js 0.28.3. See comment in the code on how to handle this later with future nw.js upgrades and the introduction of the saving of the Pd-L2Ork console position and size.
*Implement gopspill option for the canvases.
*Fix the major slowdown with nw.js versions newer than 0.42.3.
*Update K12 objects to use gopspill option, so that the icons are not truncated.
*Update autocomplete box appearance and wording inside the preferences (more space above, remove "experimental" wording).
*Enabled rebuilding of the index on every startup if build_index option is set in the preferences. LATER: investigate how the timestamp feature works...
*Ensured that the gopspill option does not work for arrays (via dialog or scripting).
*A number of improvements to the autocomplete:
  *Do not index (for autocomplete purposes) object name and/or args that failed to create.
  *Improved mechanism for autocompletion text removal (using ctrl+y). If a text is highlighted in the autocomplete list, then the command will try to remove that text. Otherwise it will try to remove text that is currently entered inside the edited object.
  *Fixed indexing issue when the popup is above the object, in which case removal threw out an error.
*Reimplemented next/prev patch window feature to make it work with newer nw.js. Should also work with older ones.
*Fixed regression with the graph_gopspill that caused first sub-GOP patch border to be drawn incorrectly.
*Added safety checks for graph_gopspill to prevent from scripting messing things up.
*Fixed visual appearance of a K12 object (raspberrypi_analog_in was erroneously instantiated with the "on" icon).
*Added dummy disis_gpio object to be used on non-RPi platforms because disis_gpio's reliance on wiringPi makes it prone to crashing when a platform is not recognized.
*Pd-l2ork main window now saves its position and size between restarts.
Add global "editable" flag. Figure out how to embed this into the patch that is not easily disabled.
  *Right click should also not work in non-editable patch. OK
  *Should be only toplevel patch? No. Any patch and by extension any subpatches. OK
  *"Select All" should not automatically enter the edit mode. OK
  *Check if text copy can still work. OK
  *Check if this properly navigates all subpatches and disables them, as well. OK
  *Deal with the alt key press and clicking on the message that disables editable option. OK
  *Rework canvas_disable_editmode_in_this_and_children_canvases to support both enabling and disabling and migrate GUI aspects to pdgui.js. OK
  *Disable put menu (see m.put.object etc. in the pd_canvas.js). MORE TESTING NEEDED
  *Add the code in pdgui to update (and keep track of) the edit menu items. MORE TESTING NEEDED
    *Use editable[cid] dictionary
    *edit, inspector, select all, find, find again, copy, paste, duplicate, cut, undo, redo, tidy
  *Add a warning in the menu as to why one cannot enable edit mode. OK
  *This may also partially address the following existing limitation:
    *cursor abstraction does not report right mouse up events due to it triggering the pop-up menu.
      *This is solved when the edit mode is not working OR by using the new disable-popup option (see below).
*Added disable-popup per-canvas option. Updated documentation for hcs/cursor and canvasinfo, and added additional documentation regarding scriptable events for canvases (referenced in the canvas-help.pd).
*Fixed issue where extra lines were added to a comment object (see pd_canvas.js line 1261 for additional info.
*Better fix for the inaccurate positioning of the Pd Console on Linux (necessary due to upstream nw.js bug). Affects Linux only.




TWEETER TODO:
*In offline mode, enable keyboard and other input for multiple tracks. Consider using the mouse focus by utilizing invisible ggee/image to make focus switching easier.

*When trying to load a pattern that does not exist (after having successfully loaded one that does), the main level goes to zero.




TWEETER DONE:
*L2Ork Tweeter: Enabled smooth pitch changing (detuning directly to signal generators without triggering the envelope).
*0.50 requires latest Pd-L2Ork 20211012 or newer due to new features added to the core pd-l2ork
*Fixed bug where shift+delete deleted twice
*Added hover mode ability to add notes based on the mouse (as opposed to the time bar) position. 00Made erasing using delete and shift+delete to support the hover mode. Also made insert (shift+` or ~) to support the hover mode.
*Updated and optimized the left panel to make room for the hover mode option.
*Updated server to also support the hover mode.
*Swapped tab and alt key functions to make play button easier to access.
*Added ability to disable changes to the instrument level/overdrive when changing instruments by holding the Return/Enter key. Upon releasing the Return/Enter key, the level will revert to the one associated with the new instrument.
*Included username in saving the session.
*Created a "teacher" patch that adds ability for the instructor to alter others' settings.
*Update sessions that don't have parts 11 and 12.
*Improved server-invoked load session to also include sync. Expanded server command vocabulary accordingly, adding l2ork-load-sync-delay.
*Made insert/reset/clear non-interactive (delete is manually handled using legacy code inside net-io).
*Updated Teacher widget to allow for convenient loading of sessions and sync-all.
*Fixed the bug where the toggling the sound off (by holding the "'" key) did not stick after updating an instrument via preset or via shift+up/down does not work.
*Added ability to request your client number to enable greater flexibility in supporting widgets, such as the Teacher widget.
*Further improvements to the Teacher widget, including fixing the double output by the user monitored through the teacher widget and other out-of-sync issues, refining the session load and adding the save option, preloading delay and other values, toggling the metro off after it has been on when transitioning to a user that does not have tracker on, and visually acknowledging that you cannot control your own part through the teacher widget.
*Further improvements to the audio level toggles, so that they are not affected by the remote session loading.
*Implemented synced session saving where master client sends its literal session to others, to offset for any potential latency-induced inconsistencies.
*Added ability for the Teacher widget to (re)sync based on the last loaded session.
*Bunch of small Teacher widget bug-fixes.
*Fixed obscure bug in the tracker-time logic that prevented perfect sync from happening while online.
*Refactored the session sync all highlighting logic, so that it appropriately shows up on all clients.
*Added L2OrkTweet abstraction designed for use in DISIS (L2OrkTweetDISIS.pd found in the core folder).
*Included DISIS Dante mixer widget (DISIS-Dante-Out-Controls.pd found in the admin folder) since the DISIS Dante system does not have an easy way of adjusting levels.
*Fixed a bug pertaining to session saving and the session being polluted by superfluous tracker information.
*Made session saving deterministic.
*Added a new snare drum preset, accompanying loop, and a session.
*Expanded server commands example.
*Reworked the local time-synced copying of another client, ensuring that syncing to another client (whether requested locally or remotely) is accurate.
*Made all session loading and sync requests (invoked from the Teacher widget) server secure, requiring a server password.
*Fixed a bug that prevented proper syncing when copying another client's loop with sync (shift+doubleclick or shift+tripleclick).
*Implemented filtering of the session sync request server-side to allow messages to pass only for clients that are currently connected.
*Optimized the way Teaching widget deals with session sync requests by relying on its own iteration of the coll object and ensuring that the session is not redundantly reloaded if the user is looking to sync to the same session. This implementation allows for the user to load one session to all clients and then use sync from another session. This has proved useful when working collaboratively developing a piece and saving sections as distinct sessions. In the process of developing new ideas, it is possible that clients intentionally move away from an earlier session's sync. This way the new material can be preserved (assuming it is not sync-sensitive), while reverting to an earlier session's sync.
*Cosmetic fixes to the Dante main out controls.
*Added a couple new work-in-progress sessions and two new presets.
*Reworked local copy logic, replacing original 6 options with 8, with 4 and 8 (quadruple click and shift+quadruple click) being identical (copy everything). The new addition is syncing the tracker position and loop-length only (loop-all variables). Also, made the basic/common elements require fewer clicks. See the supplemental documentation subpatcher in the top-right corner for additional info.
*Added local main out level control, located in the right corner of the top bar.
*Added sessions for the "4th Beat" work-in-progress.
*Added l2ork-conduct server message (synonymous with l2ork-teach). This now enables conductor patches to affect every aspect of every instrument remotely and synchronously.
*Enabled session sync offset to ensure that a saved session can be (re)synced at any given point in time.
*Disabled sending data to the server from the Teacher widget when using user 0 (which is treated as disabled mode).
*Reorganized patch locations. Server-Commands-Example was renamed to Conductor-Commands and moved in the admin subfolder. "Into the Abyss" work presets, loops, and score have been moved into a newly created works subfolder. This has also freed-up the creation of new presets past the preset 110.
*Added documentation on conductor control variables and added overdrive-override that can override user level toggle (e.g. using ' or return keys).
*Initialized load preset value to 11 to avoid having to cycle by default through empty presets.
*Refactored admin commands to make them easier to edit and expand. Re-tested each of the admin messages and addressed bugs for obfuscation, loading/saving error messages, proper socket detection for the password change, filtering of messages that get printed out, and disabling of ping timeout for a user who got bumped to an audience/guest status via server command.
*Improved handling of title-less sessions and announcing of user session loading when online.
*Refactored select init calls to make them easier to locate inside the L2Ork-Tweeter.pd patch.
*Added brute force disconnection when disconnection occurs to address the issue of potential stale sockets.
*Added l2ork-inst-level-at l2ork-inst-level-all-at admin commands to the Server and Tweeter client. Expanded the L2OrkTweet to accommodate new functionality.
*Updated Conductor-Commands documentation, adding new server commands.
*Added loadbang to (re)send main out levels to every instantiated L2OrkTweet.pd abstraction to prevent no volume issue.
*Reworked the overdrive-override logic to prevent some of the buggy behavior between the keyboard shortcuts and the levels sent by the server.
*Fixed a bug where inst-level-all-at and inst-level-at server messages did not work under certain circumstances.
*Added a l2ork-inst-level-list-at message that allows for levels for each instrument individually provided as a list.
*Updated Conductor-Commands.pd patch, documenting the new command.
*Updated the conductor-shortcuts.pd patch for the "4th beat" composition.
*Added supporting files for the "4th beat" composition.
*Refactored "Into the Abyss" to match the new formatting for the purpose of future automatic retrieval.
*Bug fixes reenabling Tweeter's chat admin messages and fixing the l2ork-free-slot server command.
*Fixed server bug where l2ork-sync-* messages did not get passed to the guest users.
*Updated Tweeter 4th Beat's conductor shortcuts patch.
*Cleaned up L2OrkTweet.pd abstraction to minimize redundant maintenance of the version it is associated with.
*Updated "4th Beat" score.
*Fixed a bug where a user who connects after all the slots have been taken is immediately made into a guest but whose id is erroneously set to -1, resulting in user's inability to receive select server messages.
*Fixed a server bug dealing with the sequence of disconnecting clients, simplifying the flow.
*Updated documentation in the server patch.
*Updated 4th Beat score.
*0.66 New version of L2Ork Tweeter with the L2Orkmote interface.
*Minor refinements to the L2Orkmote-Interface (part of Tweeter).
*Bug-fixes to the L2Orkmote implementation. Added missing file.
*Fixed missing session filename entry textbox after last update.
*0.67 fixed double delete bug when networked.
*Added Harmonicity and Mod Amp auto-update when using arrows up and down to change values.
*Improved wording on the description of various multi-click sync options.
*Added 6 new instrument presets.
*0.68 *Fixed bugs in the L2Orkmote-Interface.pd, L2OrkTweet-L2Orkmote.pd, and L2Orkmote-Tweeter.pd:
  *Loop number updates on the main window when the user is using joystick
  *Preset number updates on the main window when the user is using joystick
  *Fixed clearing of the loop not working when the joystick is centered.
  *Added dynamic ability to cycle between loops and presets by holding LH button 2.
  *Fixed a bug where preset selection button erroneously also loaded the last loop selection.
  *Transposition now works (both octaves via buttons and the fine adjustment using joystick).
  *Made joystick-based transposition microtonal.
  *Fixed a bug where dry out did not adjust using the joystick (in the appropriate mode).




HELP FILES TODO:




HELP FILES DONE:




K12:




NOTES:
*order of the execution for the new canvas creation:
gui_canvas_new has_toplevel_scalars=0
nw_create_patch_window_menus
pd_canvas.js init x55e86dd973c0 0